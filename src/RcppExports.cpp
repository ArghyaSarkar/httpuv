// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sendWSMessage
void sendWSMessage(std::string conn, bool binary, Rcpp::RObject message);
RcppExport SEXP eventloop_sendWSMessage(SEXP connSEXP, SEXP binarySEXP, SEXP messageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::string conn = Rcpp::as<std::string >(connSEXP);
    bool binary = Rcpp::as<bool >(binarySEXP);
    Rcpp::RObject message = Rcpp::as<Rcpp::RObject >(messageSEXP);
    sendWSMessage(conn, binary, message);
    return R_NilValue;
END_RCPP
}
// closeWS
void closeWS(std::string conn);
RcppExport SEXP eventloop_closeWS(SEXP connSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::string conn = Rcpp::as<std::string >(connSEXP);
    closeWS(conn);
    return R_NilValue;
END_RCPP
}
// makeServer
Rcpp::RObject makeServer(const std::string& host, int port, unsigned int pollTimeoutMs, Rcpp::Function onRequest, Rcpp::Function onWSOpen, Rcpp::Function onWSMessage, Rcpp::Function onWSClose);
RcppExport SEXP eventloop_makeServer(SEXP hostSEXP, SEXP portSEXP, SEXP pollTimeoutMsSEXP, SEXP onRequestSEXP, SEXP onWSOpenSEXP, SEXP onWSMessageSEXP, SEXP onWSCloseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::string host = Rcpp::as<std::string >(hostSEXP);
    int port = Rcpp::as<int >(portSEXP);
    unsigned int pollTimeoutMs = Rcpp::as<unsigned int >(pollTimeoutMsSEXP);
    Rcpp::Function onRequest = Rcpp::as<Rcpp::Function >(onRequestSEXP);
    Rcpp::Function onWSOpen = Rcpp::as<Rcpp::Function >(onWSOpenSEXP);
    Rcpp::Function onWSMessage = Rcpp::as<Rcpp::Function >(onWSMessageSEXP);
    Rcpp::Function onWSClose = Rcpp::as<Rcpp::Function >(onWSCloseSEXP);
    Rcpp::RObject __result = makeServer(host, port, pollTimeoutMs, onRequest, onWSOpen, onWSMessage, onWSClose);
    return Rcpp::wrap(__result);
END_RCPP
}
// destroyServer
void destroyServer(std::string handle);
RcppExport SEXP eventloop_destroyServer(SEXP handleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    std::string handle = Rcpp::as<std::string >(handleSEXP);
    destroyServer(handle);
    return R_NilValue;
END_RCPP
}
// runOnce
bool runOnce();
RcppExport SEXP eventloop_runOnce() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    bool __result = runOnce();
    return Rcpp::wrap(__result);
END_RCPP
}
// runNB
bool runNB();
RcppExport SEXP eventloop_runNB() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    bool __result = runNB();
    return Rcpp::wrap(__result);
END_RCPP
}
